blueprint:
  name: Smart Lighting Control
  description: |
    # Smart Lighting Control Blueprint

    This blueprint allows you to automate your room lighting based on:

    - **Occupancy**
    - **Illuminance levels**
    - **Sleep mode**
    - **Home occupancy**

    ## Features
    - Automatically adjusts brightness based on **lux sensor readings** or a **manual threshold**.
    - Dims lights during sleep mode for a relaxed environment.
    - Fully customizable timeout and transition times.

    [Learn More](https://github.com/your-repo/ha-config)
  domain: automation
  author: Hankanman
  source_url: https://github.com/your-repo/ha-config/blob/main/blueprints/automation/smart_lighting.yaml
  input:
    area_lights:
      name: Area Lights
      description: The lights to control
      selector:
        target:
          entity:
            domain: light
    occupancy_sensor:
      name: Occupancy Sensor
      description: Binary sensor that detects occupancy
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
    illuminance_sensor:
      name: Illuminance Sensor
      description: Sensor measuring room brightness
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_threshold_sensor:
      name: Illuminance Threshold
      description: Select an entity that stores your illuminance threshold value (in lux)
      selector:
        entity:
          domain:
            - sensor
            - input_number
          device_class: illuminance
    illuminance_threshold:
      name: Illuminance Threshold (Optional)
      description: If no illuminance sensor is used, specify a fixed threshold value (in lux)
      default: 10
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: lx
    sleep_mode_sensor:
      name: Sleep Mode
      description: Select an entity that represents sleep mode
      selector:
        entity:
          domain:
            - input_boolean
            - binary_sensor
    max_brightness_sensor:
      name: Maximum Brightness Sensor
      description: Select an entity that defines maximum brightness value (%)
      selector:
        entity:
          domain:
            - sensor
            - input_number
    max_brightness:
      name: Maximum Brightness (Optional)
      description: Specify maximum brightness value directly (%)
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    min_brightness_sensor:
      name: Minimum Brightness Sensor
      description: Select an entity that defines minimum brightness value (%)
      selector:
        entity:
          domain:
            - sensor
            - input_number
    min_brightness:
      name: Minimum Brightness (Optional)
      description: Specify minimum brightness value directly (%)
      default: 10
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    transition_time_sensor:
      name: Transition Time Sensor
      description: Select an entity that defines the transition time (in seconds)
      selector:
        entity:
          domain:
            - sensor
            - input_number
    transition_time:
      name: Transition Time (Optional)
      description: Specify the transition time directly (in seconds)
      default: 2
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds
    idle_timeout_sensor:
      name: Idle Timeout Sensor
      description: Select an entity that defines idle timeout duration (in seconds)
      selector:
        entity:
          domain:
            - sensor
            - input_number
    idle_timeout:
      name: Idle Timeout (Optional)
      description: Specify idle timeout duration directly (in seconds)
      default: 300
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

variables:
  occupancy_sensor: !input occupancy_sensor
  illuminance_sensor: !input illuminance_sensor
  illuminance_threshold: "{{ states(illuminance_threshold_sensor) | float(0) if illuminance_threshold_sensor else !input illuminance_threshold }}"
  sleep_mode: "{{ is_state(!input sleep_mode_sensor, 'on') if sleep_mode_sensor else false }}"
  max_brightness: "{{ states(max_brightness_sensor) | float(0) if max_brightness_sensor else !input max_brightness }}"
  min_brightness: "{{ states(min_brightness_sensor) | float(0) if min_brightness_sensor else !input min_brightness }}"
  transition_time: "{{ states(transition_time_sensor) | float(0) if transition_time_sensor else !input transition_time }}"
  idle_timeout: "{{ states(idle_timeout_sensor) | float(0) if idle_timeout_sensor else !input idle_timeout }}"

trigger:
  - platform: state
    entity_id: !input occupancy_sensor
  - platform: state
    entity_id: !input sleep_mode_sensor
  - platform: state
    entity_id: !input illuminance_sensor
  - platform: homeassistant
    event: start

condition:
  - condition: template
    value_template: "{{ not is_state(!input people_home, 'off') }}"

action:
  - variables:
      is_occupied: "{{ is_state(occupancy_sensor, 'on') }}"
      is_sleep_mode: "{{ sleep_mode }}"
      current_lux: "{{ states(illuminance_sensor) | float(0) }}"
      needs_light: "{{ current_lux < illuminance_threshold }}"

  - choose:
      # Main occupied and needs light condition
      - conditions:
          - "{{ is_occupied }}"
          - "{{ needs_light }}"
        sequence:
          - choose:
              # Sleep mode handling
              - conditions: "{{ is_sleep_mode }}"
                sequence:
                  - service: light.turn_on
                    target: !input area_lights
                    data:
                      brightness_pct: "{{ min_brightness }}"
                      transition: "{{ transition_time }}"
              # Normal mode handling
              - conditions: "{{ not is_sleep_mode }}"
                sequence:
                  - service: light.turn_on
                    target: !input area_lights
                    data:
                      brightness_pct: "{{ max_brightness }}"
                      transition: "{{ transition_time }}"
    default:
      - delay:
          seconds: "{{ idle_timeout }}"
      - service: light.turn_off
        target: !input area_lights
        data:
          transition: "{{ transition_time }}"

mode: restart
